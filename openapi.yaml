openapi: '3.0.3'
info:
  title: Genius Yield Bot API
  description: Open API Specificaion of the Genius Yield Bot API for trading strategy integration.
  version: '0.1.0'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    Settings:
      type: object
      properties: {
          network: { type: string },
          version: { type: string },
          revision: { type: string },
          backend: { type: string },
          address: { type: string }
        }
      example:
       { network: "mainnet", version: "0.1.0", revision: "c7cc91eec7f3d50b8de196a01034b0cc7097ae59", backend: "mmb", address: "addr1v87wwwe4f59dqc50qyt0ckcs0kvh7glpweyal2k5nsgyucgk6038f" }
    Fees:
      type: object
      properties: {
          flat_maker_fee: { type: string },
          flat_taker_fee: { type: string },
          percentage_maker_fee: { type: string },
          percentage_taker_fee: { type: string }
        }
      example:
       { network: "mainnet", version: "0.1.0", revision: "c7cc91eec7f3d50b8de196a01034b0cc7097ae59", backend: "mmb" }
    Market:
      type: object
      required: [market_id, base_asset, target_asset]
      properties:
        market_id: { type: string, description: "Identifier of a ticker with delimiter to separate base/target, eg. ADA/GENS" }
        base_asset: { type: string, description: "Ticker of a the base cryptoasset, eg. ADA" }
        target_asset: { type: string, description: "Symbol of the target cryptoasset, eg. GENS" }
      example:
       { market_id: "ADA/GENS", base_asset: "ADA", target_asset: "GENS" }
    Markets:
      type: array
      items: {$ref: '#/components/schemas/Market'}
    Balance:
      type: object
      required: [asset, amount]
      properties:
        asset: { type: string, description: "Identifier of an asset }"}
        amount: { type: string, description: "Amount of available asset" }
      example:
       { asset: "GENS", amount: "4531.0341" }
    Balances:
      type: array
      items: {$ref: '#/components/schemas/Balance'}
    LimitOrder:
      type: object
      properties:
        order_type: {type: string}
        timestamp: { type: string, format: "date", example: "1985-04-12T23:00:00.00Z" }
        base_asset: { type: string, description: "Ticker of a the base cryptoasset, eg. ADA" }
        base_amount: { type: string, format: double, description: "Transaction amount in base pair volume." }
        target_asset: { type: string, description: "Symbol of the target cryptoasset, eg. GENS" }
        target_amount: { type: string, format: double, description: "Transaction amount in target pair volume." }
      example:
        { market_id : "ADA/GENS", timestamp : "1985-04-12T23:00:00.00Z", base_amount : 49.9, target_amount : 50.1 }
    MarketOrder:
      type: object
      properties:
        timestamp: { type: string, format: "date", example: "1985-04-12T23:00:00.00Z" }
        base_asset: { type: string, description: "Ticker of a the base cryptoasset, eg. ADA" }
        base_amount: { type: string, format: double, description: "Transaction amount in base pair volume." }
        target_asset: { type: string, description: "Symbol of the target cryptoasset, eg. GENS" }
    Order:
      oneOf:
        - $ref: '#/components/schemas/MarketOrder'
        - $ref: '#/components/schemas/LimitOrder'
      discriminator:
        propertyName: type
      example: 
        { market_id : "ADA/GENS", timestamp : "1985-04-12T23:00:00.00Z", base_amount : 49.9, target_amount : 50.1 }
    Orders:
      type: array
      items: {$ref: '#/components/schemas/Order'}
    CancelOrderSigningRequest:
      type: object
      properties:
        orders: { $ref: '#/components/schemas/CancelOrderSigningRequest' }
    PlaceOrderSigningRequest:
      type: object
      properties:
        orders: { $ref: '#/components/schemas/CancelOrderSigningRequest' }
    SigningRequest:
      oneOf:
        - $ref: '#/components/schemas/CancelOrderSigningRequest'
        - $ref: '#/components/schemas/PlaceOrderSigningRequest'
        # TODO: Pass the collateral UTxO for tx building?
        # TODO: walletRewardAddresses?
        # TODO: walletUnusedAddresses?
        # TODO: walletUsedAddresses?
    Trade:
      type: object
      required: [market_id, base_asset, target_asset, pool_id, last_price, base_volume, target_volume, liquidity_in_usd]
      properties:
        trade_id: { type: string, description: "Identifier of a ticker with delimiter to separate base/target, eg. ADA/GENS" }
        base_volume: { type: number, format: double, description: "Transaction amount in base pair volume." }
        target_volume: { type: number, format: double, description: "Transaction amount in target pair volume." }
        trade_timestamp: { type: integer, description: "Unix timestamp in milliseconds for when the transaction occurred." }
        type: { type: string, description: "Used to determine the type of the transaction that was completed. Buy: Identifies an ask that was removed from the order book. Sell: Identifies a bid that was removed from the order book." }
    Trades:
      type: array
      items: {$ref: '#/components/schemas/Trade'}
      example:
        [
         { "trade_id":1234567, "price":"50.1", "base_volume":"0.1", "target_volume":"1", "trade_timestamp":"1700050000", "type":"buy" },
         { "trade_id":1234567, "price":"50.1", "base_volume":"0.1", "target_volume":"1", "trade_timestamp":"1700050000", "type":"sell" }
        ]
    Price:
      type: object
      properties:
        base_close: { type: string, format: double, description: Base close }
        base_high: { type: string, format: double, description: Target high }
        base_low: { type: string, format: double, description: Base low }
        base_open: { type: string, format: double, description: Base open }
        base_volume: {type: string, format: double, description: Base volume }
        target_close: { type: string, format: double, description: Target close }
        target_high: { type: string, format: double, description: Target high }
        target_low: { type: string, format: double, description: Target low }
        target_open: { type: string, format: double, description: Target open}
        target_volume: { type: string, format: double, description: Target volume }
        count: { type: integer, description: Candlestick size }
        time_period_start: { type: string , description: Trade timestamp, format: "date", example: "1985-04-12T23:00:00.00Z" }
        time_period_end: { type: string , description: Trade timestamp, format: "date", example: "1985-04-12T23:15:00.00Z" }
    Prices:
      type: array
      items: {$ref: '#/components/schemas/Price'}
security:
  - ApiKeyAuth: [read, write]
tags: [{name: markets}, {name: orders}, {name: trades}, {name: prices}, {name: settings}]
externalDocs:
 description: Bot API Documentation
 url: https://www.bot-api-docs.geniusyield.co/
servers:
  - url: https://localhost:4000/
  - url: https://bot.api.geniusyield.co/
paths:
  /settings:
    get:
      tags: [settings]
      responses: { 200: {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/Settings' }}}}}
  /markets:
    get:
      tags: [markets]
      responses: { 200: {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/Markets' }}}}}
  /balances:
    get:
      tags: [balances]
      responses: { 200: {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/Balances' }}}}}
  /orders:
    parameters:
     - {in: query, name: market_id, required: true, schema: { type: string }}
     - {in: query, name: owner, required: false, schema: { type: string }}
    get:
      tags: [orders]
      description: Fetch orders for a specific market, like GENS/ADA for example.
      responses: {200: {description: Successfully fetched orders, content: {application/json: {schema: {$ref: '#/components/schemas/Orders' }}}}}
    post:
      tags: [orders]
      description: Create new on-chain order (places an order).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Orders'
      responses: {201: {description: Created a new on-chain order.}}
    delete:
      tags: [orders]
      description: Cancels an exisiting on-chain order.
      responses: {202: {description: Canceled on-chain order.}}
  /orders/tx/build-place-order-tx:
    post:
      tags: [orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Orders'
      responses: {201: {description: "Created unsigned transactions to place new orders"}}
      # TODO: result: list with the unsigned transactions
  /orders/tx/build-cancel-order-tx:
    post:
      tags: [orders]
      responses: {201: {description: "Created unsigned transactions to cancel new orders"}}
      # result: list with the unsigned transactions
  /orders/tx/sign:
    post:
      tags: [orders]
      responses: {201: {description: "Created unsigned transactions to cancel existing orders"}}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigningRequest'
  /orders/tx/submit:
    post:
      tags: [orders]
      responses: {201: {description: "Submitted the passed signed transactions and created new on-chain orders."}}
      # result: list with the details for the transaction submittion
  /orders/tx/sign_and_submit:
    post:
      tags: [orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigningRequest'
      responses: {201: {description: "Succesfully singed the passed unsigned transactions and submitted the signed transactions."}}
      # result: list with the unsigned transactions
  /historical_trades:
    parameters:
     - {in: query, name: market_id, required: true, schema: { type: string }}
     - {in: query, name: type, required: false, schema: { type: string, enum: ["buy", "sell"], example: "buy" }}
     - {in: query, name: limit, required: false, schema: { type: integer, example: "100" }}
     - {in: query, name: page, required: false, schema: { type: integer, example: "1" }}
     - {in: query, name: start_time, required: false, schema: { type: string, format: "date", example: "1996-12-19T16:39:57-08:00" }}
     - {in: query, name: end_time, required: false, schema: { type: string, format: "date", example: "1996-12-19T17:39:57-08:00" }}
    get:
      tags: [trades]
      responses: { 200: {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/Trades' }}}}}
  /historical_prices:
    parameters:
     - {in: query, name: market_id, required: true, schema: { type: string }}
     - {in: query, name: resolution, required: false, schema: { type: string, enum: ["1m", "5m", "15m", "30m", "1h", "4h", "1d", "1w", "1mo"], example: "30m" }}
     - {in: query, name: from, required: false, schema: { type: string, format: "date", example: "1996-12-19T16:39:57-08:00" }}
     - {in: query, name: to, required: false, schema: { type: string, format: "date", example: "1996-12-19T16:39:57-08:00" }}
     - {in: query, name: limit, required: false, schema: { type: integer, example: "100" }}
     # TODO: Add paging as soon as Maestro supports it.
     # - {in: query, name: page, required: false, schema: { type: integer, example: "1" }}
     - {in: query, name: sort, required: false, schema: { type: string, enum: [asc, desc] }}
    get:
      tags: [price]
      responses: { 200: {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/Prices' }}}}}
  /trading_fees:
    get:
      tags: [fees]
      responses: { 200: {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/Fees' }}}}}
