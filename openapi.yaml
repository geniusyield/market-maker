openapi: '3.1.0'
info:
  title: Genius Yield Trading Bot API
  description: Open API Specificaion of the Genius Yield Tradding Bot API for external trading strategy implementation integration.
  version: '1.0.0'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    Settings:
      type: object
      properties: {
          network: { type: string, enum: [prepod, mainnet], example: "mainnet" },
          version: { type: string, example: "1.0.2" },
          revision: { type: string, example: "c7cc91eec7f3d50b8de196a01034b0cc7097ae59" },
          backend: { type: string, enum: [mmb]},
          address: { type: string, example: "addr1v87wwwe4f59dqc50qyt0ckcs0kvh7glpweyal2k5nsgyucgk6038f" }
        }
      required: [network, version, revision, backend]
      # optional: [address]
      example:
       { network: "mainnet", version: "0.1.0", revision: "c7cc91eec7f3d50b8de196a01034b0cc7097ae59", backend: "mmb", address: "addr1v87wwwe4f59dqc50qyt0ckcs0kvh7glpweyal2k5nsgyucgk6038f" }
    Fees:
      type: object
      properties: {
          flat_maker_fee: { type: string },
          flat_taker_fee: { type: string },
          percentage_maker_fee: { type: string },
          percentage_taker_fee: { type: string }
        }
      required: [flat_maker_fee, flat_taker_fee, percentage_maker_fee, percentage_taker_fee]
      example:
       { flat_maker_fee: "1.2", flat_taker_fee: "2.3", percentage_maker_fee: "0.75", percentage_taker_fee: "1.25" }
    Market:
      type: object
      properties:
        market_id: { type: string, description: "Identifier of a ticker with delimiter to separate base/target", example: "lovelaces_dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53" }
        base_asset: { type: string, description: "Identifier of the base asset eg. lovelaces" }
        base_asset_ticker: { type: string, description: "Ticker of a the base cryptoasset.", example: "ADA" }
        base_asset_decimals: { type: string, format: numeric, example: "6" }
        target_asset: { type: string, description: "Identifier of the target asset", example: "dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53" }
        target_asset_ticker: { type: string, description: "Symbol of the target cryptoasset", example: "GENS" }
        target_asset_decimals: { type: string, format: numeric, example: "6" }
      required: [market_id, base_asset, base_asset_ticker, base_asset_decimals, target_asset, target_asset_ticker, target_asset_decimals]
      example:
        {
          market_id: "lovelaces_dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53",
          base_asset: "lovelaces",
          base_asset_ticker: "ADA",
          base_asset_decimals: "6",
          target_asset: "dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53",
          target_asset_ticket: "GENS",
          target_asset_decimals: "6"
        }
    Markets:
      type: array
      items: {$ref: '#/components/schemas/Market'}
    Balance:
      type: object
      properties:
        asset: { type: string, description: "Ticker of a the cryptoasset", example: "dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53"}
        asset_ticker: { type: string, description: "Ticker of a the cryptoasset", example: "GENS"}
        asset_decimals: { type: string, format: numeric, example: "6" }
        amount: { type: string, format: numeric, description: "Amount of asset available", example: "123456789.123456789123456789" }
      required: [asset, amount]
      example:
       { asset: "GENS", amount: "4531.0341" }
    Balances:
      type: array
      items: {$ref: '#/components/schemas/Balance'}
    Order:
      properties:
        base_asset: {type: string, description: "The base cryptoasset", example: "lovelaces"  }
        # TODO: discuss if the amount should be indivisible unit or not?
        base_amount: {type: string, format: numeric, description: "Transaction amount in base pair volume.", example: "6000000" }
        target_asset: {type: string, description: "The the target cryptoasset", example: "dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53" }
        # TODO: discuss if the amount should be indivisible unit or not?
        target_amount: { type: string, format: numeric, description: "Transaction amount in target pair volume." }
        type: { type: string, enum: ["buy", "sell"], example: "buy" }
        valid_from: {type: string, format: date, example: 1985-04-12T23:00:00.00Z }
        valid_until: {type: string, format: date, example: 1985-04-12T23:15:00.00Z }
      required: [base_asset, base_amount, target_asset, target_amount]
      optional: [valid_from, valid_until]
      example:
        { base_asset : "ADA", base_amount : "2.0123214", target_asset: "GENS", target_amount : "1.000001" }
    Orders:
      type: array
      items: {$ref: '#/components/schemas/Order'}
    BuildTxRequestBase:
      type: object
      properties:
        collateral_utxo: {type: string}
        address: {type: string, example: "addr1v87wwwe4f59dqc50qyt0ckcs0kvh7glpweyal2k5nsgyucgk6038f"}
      required: []
      optional: [collateral_utxo, address]
    BuildPlaceOrdersTxRequest:
      allOf:
        - $ref: '#/components/schemas/BuildTxRequestBase'
        - type: object
          properties:
            orders: {type: array, items: {$ref: '#/components/schemas/Order'}}
          required: [orders]
          optional: []
    BuildCancelOrdersTxRequest:
      allOf:
        - $ref: '#/components/schemas/BuildTxRequestBase'
        - type: object
          properties:
            orders: {type: array, items: {type: string, description: "orders to be cancelled"}}
          required: [orders]
    Transaction:
      type: object
      properties:
        cbor_hex: {type: string}
    SubmitTransactionResponse:
      type: object
      properties:
        transaction_id: {type: string}
        message: {type: string}
        fees: {type: string, format: numeric}
        flat_fees: {type: string, format: numeric}
        offer_fee_percent: {type: string, format: numeric}
        offer_fee_amount: {type: string, format: numeric}
        deposit: {type: string, format: numeric}
      required: [transaction_id, message]
      optional: [fees, flat_fees, offer_fee_percent, offer_fee_amount, deposit]
    Trade:
      type: object
      properties:
        timestamp: { type: integer, description: "Unix timestamp in milliseconds for when the transaction occurred." }
        base_asset: {type: string, description: "The base cryptoasset", example: "lovelaces"  }
        base_amount: { type: number, format: double, description: "Transaction amount in base pair volume." }
        target_amount: { type: number, format: double, description: "Transaction amount in target pair volume." }
        target_asset: {type: string, description: "The the target cryptoasset", example: "dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53" }
        type: { type: string, description: "Used to determine the type of the transaction that was completed. Buy: Identifies an ask that was removed from the order book. Sell: Identifies a bid that was removed from the order book." }
      required: [timestamp, base_amount, target_amount, trade_timestamp, type]
    Trades:
      type: array
      items: {$ref: '#/components/schemas/Trade'}
      example:
        [
         { "trade_id":1234567, "price":"50.1", "base_volume":"0.1", "target_volume":"1", "trade_timestamp":"1700050000", "type":"buy" },
         { "trade_id":1234567, "price":"50.1", "base_volume":"0.1", "target_volume":"1", "trade_timestamp":"1700050000", "type":"sell" }
        ]
    Price:
      type: object
      properties:
        base_close: { type: string, format: numeric, description: Base close }
        base_high: { type: string, format: numeric, description: Target high }
        base_low: { type: string, format: numeric, description: Base low }
        base_open: { type: string, format: numeric, description: Base open }
        base_volume: {type: string, format: numeric, description: Base volume }
        target_close: { type: string, format: numeric, description: Target close }
        target_high: { type: string, format: numeric, description: Target high }
        target_low: { type: string, format: numeric, description: Target low }
        target_open: { type: string, format: numeric, description: Target open}
        target_volume: { type: string, format: numeric, description: Target volume }
        count: { type: integer, description: Candlestick size }
        time_period_start: { type: string , description: Trade timestamp, format: "date", example: "1985-04-12T23:00:00.00Z" }
        time_period_end: { type: string , description: Trade timestamp, format: "date", example: "1985-04-12T23:15:00.00Z" }
      required: [base_close, base_high, base_low, base_open, base_volume, target_close, target_high, target_low, target_open, target_volume]
    Prices:
      type: array
      items: {$ref: '#/components/schemas/Price'}
security:
  - ApiKeyAuth: [read, write]
tags: [{name: markets}, {name: orders}, {name: trades}, {name: prices}, {name: settings}]
externalDocs:
 description: Bot API Documentation
 url: https://www.bot-api-docs.geniusyield.co/
servers:
  - url: https://localhost:4000/
  - url: https://bot.api.geniusyield.co/
paths:
  /settings:
    get:
      tags: [settings]
      responses: { 200: {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/Settings' }}}}}
  /markets:
    get:
      tags: [markets]
      responses: { 200: {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/Markets' }}}}}
  /balances:
    get:
      tags: [balances]
      description: Get the balances of different crypto assets available for the trading bot.
      responses: { 200: {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/Balances' }}}}}
  /orders:
    parameters:
     - {in: query, name: market_id, required: true, schema: { type: string }, example: "lovelaces_dda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fb.0014df1047454e53"}
     - {in: query, name: owner, required: false, schema: { type: string }, example: "addr1v87wwwe4f59dqc50qyt0ckcs0kvh7glpweyal2k5nsgyucgk6038f"}
    get:
      tags: [orders]
      description: Fetch orders for a specific market, like GENS/ADA for example.
      responses: {200: {description: Successfully fetched orders, content: {application/json: {schema: {$ref: '#/components/schemas/Orders' }}}}}
    post:
      tags: [orders]
      description: Create new on-chain order (places an order).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Orders'
      responses:
        201:
          description: "Succesfully created new on-chain orders."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitTransactionResponse'
    delete:
      tags: [orders]
      description: Cancels an exisiting on-chain order.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orders: {type: array, items: {type: string, description: "orders to be cancelled"}}
      responses: {202: {description: Canceled on-chain order.}}
  /historical-trades:
    parameters:
     - {in: query, name: market_id, required: true, schema: { type: string }}
     - {in: query, name: type, required: false, schema: { type: string, enum: ["buy", "sell"], example: "buy" }}
     - {in: query, name: limit, required: false, schema: { type: integer, example: "100" }}
     - {in: query, name: page, required: false, schema: { type: integer, example: "1" }}
     - {in: query, name: start_time, required: false, schema: { type: string, format: "date", example: "1996-12-19T16:39:57-08:00" }}
     - {in: query, name: end_time, required: false, schema: { type: string, format: "date", example: "1996-12-19T17:39:57-08:00" }}
    get:
      tags: [trades]
      responses: { 200: {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/Trades' }}}}}
  /historical-prices:
    parameters:
     - {in: query, name: market_id, required: true, schema: { type: string }}
     - {in: query, name: resolution, required: false, schema: { type: string, enum: ["1m", "5m", "15m", "30m", "1h", "4h", "1d", "1w", "1mo"], example: "30m" }}
     - {in: query, name: from, required: false, schema: { type: string, format: "date", example: "1996-12-19T16:39:57-08:00" }}
     - {in: query, name: to, required: false, schema: { type: string, format: "date", example: "1996-12-19T16:39:57-08:00" }}
     - {in: query, name: limit, required: false, schema: { type: integer, example: "100" }}
     # TODO: Add paging as soon as Maestro actually supports it.
     # - {in: query, name: page, required: false, schema: { type: integer, example: "1" }}
     # TODO: consider adding support for passing price provider
     # - {in: query, name: price_source, required: false, schema: { type: string, example: "minswap" }}
     - {in: query, name: sort, required: false, schema: { type: string, enum: [asc, desc] }}
    get:
      tags: [price]
      responses: { 200: {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/Prices' }}}}}
  /trading-fees:
    get:
      tags: [fees]
      responses: { 200: {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/Fees' }}}}}
  /tx/build-place-order-tx:
    post:
      tags: [tx]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildPlaceOrdersTxRequest'
      responses:
        201:
          description: "Created unsigned transactions to place new orders"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /tx/build-cancel-order-tx:
    post:
      tags: [tx]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildCancelOrdersTxRequest'
      responses:
        201:
          description: "Created unsigned transactions to cancel new orders"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /tx/sign:
    post:
      tags: [tx]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        201:
          description: "Created unsigned transactions to cancel existing orders"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /tx/submit:
    post:
      tags: [tx]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        201:
          description: "Submitted the passed signed transactions and created new on-chain orders."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitTransactionResponse'
  /tx/sign-and-submit:
    post:
      tags: [tx]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        201:
          description: "Submitted the passed signed transactions and created new on-chain orders."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitTransactionResponse'
