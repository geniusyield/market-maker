# Sample bot configuration for Pre-production testnet.
# Please see README file in project's root for thorough explanation of below fields.

# Wallet configuration.
mbc_user:
  # Either load wallet from signing key generated using `cardano-cli` (normal or extended).
  ur_s_key_path: path-to-skey
  # Or load the wallet from mnemonic seed phrase.
  ur_mnemonic:
    mnemonic:
      - health
      - unable
      - dog
      - lend
      - artefact
      - arctic
      - dinner
      - energy
      - silent
      - wealth
      - shock
      - safe
      - glad
      - mail
      - gas
      - flag
      - beauty
      - penalty
      - mixed
      - garbage
      - erupt
      - wonder
      - magnet
      - around
    # Account index.
    acc_ix: 0
    # Payment address index.
    addr_ix: 0
  # Reserved collateral UTxO.
  ur_coll: tx-id#tx-ix
  # Stake credential to generate for bot's address and to place orders at a mangled address.
  ur_stake_address: bech32-encoded-stake-address
# Delay in microseconds after which strategy is reran, below example value means 2 minutes (120 seconds).
mbc_delay: 120000000
# Price provider configuration.
mbc_price_config:
  # Maestro API key. Fetching prices from https://docs.gomaestro.org/DefiMarketAPI/mkt-dex-ohlc endpoint requires a paid subscription.
  pc_api_key: <<MAESTRO_TOKEN>>
  # Resolution parameter of above API call. Note that we take the closing price of latest resolution window.
  pc_resolution: 15m
  pc_network_id: mainnet
  # Supported values of `pc_dex` are `minswap` and `genius-yield`.
  # So put either
  # pc_dex: minswap
  # or
  # pc_dex: genius-yield
  pc_dex: put either minswap or genius-yield
  # Following field (`pc_override`) is not to be provided for Mainnet. It is their when testing market maker bot with dummy tokens.
  pc_override:
    mpo_pair: ADA-GENS
    mpo_commodity_is_first: false
# Please see description following this sample for details regarding `mbc_strategy_config` field.
mbc_strategy_config:
  sc_spread:
    # Can simple write
    # numerator: 1
    # denominator: 100
    # To specify same spread for both sell and buy side. Or can individually specify for each like done below.
    sell_side_spread:
      numerator: 2
      denominator: 100
    buy_side_spread:
      numerator: 1
      denominator: 100
  sc_token_volume:
    tv_sell_min_vol: 1000000000
    tv_buy_min_vol: 2000000000
    tv_sell_budget: 3500000000
    tv_buy_budget: 6600000000
    tv_sell_vol_threshold: 10000000000
    tv_buy_vol_threshold: 20000000000
  sc_price_check_product: 9
  sc_cancel_threshold_product: 4
# Token details.
mbc_token:
  # Asset class represented as concatenation of currency symbol and asset name with dot separator.
  # Below sample is of `tGENS` test token.
  ac: c6e65ba7878b2f8ea0ad39287d3e2fd256dc5c4160fc19bdf4c4d87e.7447454e53
  # Registered decimal places for the token. As an examples, for `ADA` it is 6 and for `SNEK` it is 0.
  precision: 6
# Boiler plate for Pre-production testnet.
mbc_fp_nft_policy: compiled-scripts/minting-policy
mbc_fp_order_validator: compiled-scripts/partial-order
mbc_po_config_addr: addr_test1wrgvy8fermjrruaf7fnndtmpuw4xx4cnvfqjp5zqu8kscfcvh32qk
mbc_po_refs:
  por_ref_nft: fae686ea8f21d567841d703dea4d4221c2af071a6f2b433ff07c0af2.8309f9861928a55d37e84f6594b878941edce5e351f7904c2c63b559bde45c5c
  por_val_ref: be6f8dc16d4e8d5aad566ff6b5ffefdda574817a60d503e2a0ea95f773175050#2
  por_mint_ref: be6f8dc16d4e8d5aad566ff6b5ffefdda574817a60d503e2a0ea95f773175050#1
